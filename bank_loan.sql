SELECT * FROM LOAN_DATAS ;

SELECT COUNT(ID) AS TOTAL_LOAN_AMOUNT
FROM LOAN_DATAS;

SELECT COUNT(ID) AS TOTAL_LOAN_AMOUNT
FROM LOAN_DATAS
WHERE EXTRACT(MONTH FROM ISSUE_DATE) = 12
AND EXTRACT(YEAR FROM ISSUE_DATE) = 2021;

\Total funded amount
SELECT SUM(LOAN_AMOUNT) AS MTD_TOTAL_FUNDED_AMOUNT FROM LOAN_DATAS
WHERE EXTRACT(MONTH FROM ISSUE_DATE)=12 AND EXTRACT(YEAR FROM ISSUE_DATE)=2021

SELECT SUM(LOAN_AMOUNT) AS PMTD_TOTAL_FUNDED_AMOUNT FROM LOAN_DATAS
WHERE EXTRACT(MONTH FROM ISSUE_DATE)=11 AND EXTRACT(YEAR FROM ISSUE_DATE)=2021

\TOTAL RECEIVED AMOUNT
SELECT SUM(TOTAL_PAYMENT)AS TOTAL_AMOUNT_RECEIVED FROM LOAN_DATAS 
WHERE EXTRACT(MONTH FROM ISSUE_DATE)=12 AND EXTRACT(YEAR FROM ISSUE_DATE)=2021;

\ AVERAGE INTREST RATE

select avg(int_rate)*100 as avg_interest_rate from loan_datas;

\ AVERAGE DEBT TO INCOME INCOME RATIO :EVALUATING THE AVERAGE DTI FOR OUR BORROWERS HELPS US GUAGE THEIR FINANCIAL HEALTH.
\ WE NEED TO COMPUTE THE AVG DTI(DEBT TO INCOME RATIO) FOR ALL LOANS,MTD,AND TRACK MOM FLUCTIONS 

SELECT AVG(DTI)*100 AS AVG_Debt_Income_ratio
FROM LOAN_DATAS
WHERE EXTRACT(MONTH FROM ISSUE_DATE) = 12 
AND EXTRACT(YEAR FROM ISSUE_DATE) = 2021;

\GOOD LOAN STATUS
SELECT COUNT(*) AS Good_loan_applications
FROM LOAN_DATAS
WHERE loan_status='Fully Paid' or loan_status='Current';

\total good loan funded amount
SELECT SUM(LOAN_AMOUNT) AS GGOD_LOAN_FUNDED_AMOUNT
FROM LOAN_DATAS
WHERE loan_status in ('Fully Paid' ,'Current')

\ good loan total received amount
SELECT SUM(TOTAL_PAYMENT)AS GOOD_LOAN_TOTAL_RECEIVED_AMOUNT 
FROM LOAN_DATAS
WHERE loan_status ='Fully Paid' or loan_status='Current'

\BAD LOAN PERCENTAGE
SELECT 
	(COUNT(CASE WHEN loan_status='Charged Off' THEN id END)*100.0)/COUNT(id) as BAD_LOAN_PERCENTAGE
FROM LOAN_DATAS;

\BAD LOAN APPLICATION
SELECT COUNT(id)as BAD_LOAN_APPLICATION
FROM LOAN_DATAS
WHERE loan_status='Charged Off'

\BAD LOAN FUNDED AMOUNT
SELECT SUM(LOAN_AMOUNT) AS BAD_LOAN_FUNDED_AMOUNT
FROM LOAN_DATAS
WHERE loan_status='Charged Off'

\BAD LOAN AMOUNT RECEIVED 
SELECT SUM(TOTAL_PAYMENT)AS BAD_LOAN_AMOUNT_RECEIVED
FROM LOAN_DATAS
WHERE LOAN_STATUS='Charged Off'

\ loan status
SELECT LOAN_STATUS ,
		COUNT(ID)AS TOTAL_LOAN_APPLICATION,
		SUM(TOTAL_PAYMENT)AS TOTAL_AMOUNT_RECEIVED,
		SUM(LOAN_AMOUNT)AS TOTAL_FUNDED_AMOUNT,
		AVG(INT_RATE *100) AS INTEREST_RATE,
		AVG(DTI *100)AS DEBT_TO_INTREAST_RATIO
FROM LOAN_DATAS
GROUP BY 1;

SELECT 
		LOAN_STATUS,
		SUM(TOTAL_PAYMENT)AS MTD_TOTAL_AMOUNT_RECEIVED,
		SUM(LOAN_AMOUNT)AS MTD_TOTAL_FUNDED_AMOUNT
FROM LOAN_DATAS
WHERE EXTRACT(MONTH FROM ISSUE_DATE)=12
GROUP BY 1;

\ MONTH TRENDS BY ISSUE DATE 
SELECT TO_CHAR(issue_date, 'Month') AS Month_name,
		TO_CHAR(issue_date, 'Day') AS day_name,
		count(id)as total_loan_applications,
		sum(loan_amount)as total_funded_amount,
		sum(total_payment)as Total_received_amount
FROM LOAN_DATAS
group by TO_CHAR(issue_date, 'Month'),TO_CHAR(issue_date, 'Day')
order by TO_CHAR(issue_date, 'Month')asc ;

\REGIONAL ANALYSIS BY STATE : TO IDENTIFY REGIONS WITH SIGNIFICANTS LEADING ACTIVITY AND ASSESS REGIONAL DISPARTIES.
SELECT ADDRESS_STATE ,
		COUNT(ID) AS TOTAAL_LOAN_APPLICATION,
		SUM(LOAN_AMOUNT)AS TOTAL_FUNDED_AMOUNT,
		SUM(TOTAL_PAYMENT)AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATAS
GROUP BY 1
ORDER BY SUM(LOAN_AMOUNT) DESC ;

\LOAN TERM ANALYSIS:TO ALLOW THE CLIENT TO UNDERSTAND THE DISTRIBUTION OF LOAN ACROSS VARIOUS TERM LENGTH.
SELECT TERM,
		COUNT(ID) AS TOTAL_NO_OF_LOAN_APPLICATION,
		SUM(LOAN_AMOUNT) AS TOTAL_AMOUNT_FUNDED,
		SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATAS
GROUP BY 1
ORDER BY 1;

\PURPOSES OF LOAN,AIIDING IN THE UNDERSTANDING OF THE PRIMARY REASONS BORROWERS SEEK FINANCING.
SELECT PURPOSE,
		COUNT(ID) AS TOTAL_LOAN_APPLICATION,
		SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
		SUM(TOTAL_PAYMENT)AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATAS
GROUP BY 1
ORDER BY COUNT(ID)DESC;

\HOME OWNERSHIP ANALYSIS : FOR A HIERARCHICAL VIEW OF HOW HOME OWNERSHIP IMPACTS LOAN APPLICATIONS AND DISBURSMENT
SELECT HOME_OWNERSHIP,
		COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
		SUM(LOAN_AMOUNT)AS TOTAL_FUNDED_AMOUNT,
		SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATAS
where grade='A' and address_state='CA'
GROUP BY HOME_OWNERSHIP
ORDER BY COUNT(ID)DESC;
 show database 30 Days SQL Challenge;






			




